{"version":3,"file":"static/js/90.3768a05a.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm .js","components/ContactList/ContactList .js","components/Filter/Filter.js","pages/Contacts.js"],"sourcesContent":["import { createSelector } from 'reselect';\n\nexport const selectContacts = state => state.contacts.list;\nexport const selectFilter = state => state.contacts.filter;\n\n\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(\n      contact =>\n        contact.name &&\n        contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { addContact } from '../../redux/contacts/contactsOperations';\nimport { selectContacts } from '../../redux/contacts/selectors';\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const [contact, setContact] = useState({ name: '', number: '' });\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const handleInputChange = e => {\n    setErrorMessage('');\n    const { name, value } = e.target;\n    setContact(prevContact => ({\n      ...prevContact,\n      [name]: value,\n    }));\n  };\n\n    const handleAddContact = async e => {\n      e.preventDefault();\n      const { name, number } = contact;\n\n      // Логирование данных перед отправкой на сервер\n      console.log('Sending data to server:', { name, number });\n\n      if (name.trim() === '' || number.trim() === '') {\n        setErrorMessage('Name and number are required.');\n        return;\n      }\n\n      const existingContact = contacts.find(\n        c => c.name.toLowerCase() === name.toLowerCase() || c.number === number\n      );\n      if (existingContact) {\n        setErrorMessage('Цей контакт та номер вже існує.');\n        return;\n      }\n\n      dispatch(addContact({ name, number }));\n\n      setContact({ name: '', number: '' });\n    };\n\n\n\n\n  return (\n    <>\n      <form onSubmit={handleAddContact}>\n        <label>Ім'я</label>\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={contact.name}\n          onChange={handleInputChange}\n          required\n        />\n        <label>Номер</label>\n        <input\n          type=\"tel\"\n          name=\"number\"\n          value={contact.number}\n          onChange={handleInputChange}\n          required\n        />\n        <button type=\"submit\">Додати контакт</button>\n      </form>\n      {errorMessage && <p style={{ color: 'red' }}>{errorMessage}</p>}\n    </>\n  );\n};\n\nexport default ContactForm;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from '../../redux/contacts/contactsOperations';\nimport { selectVisibleContacts } from '../../redux/contacts/selectors';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  const handleDeleteContact = id => {\n    dispatch(deleteContact(id));\n  };\n\n  return (\n    <ul>\n      {visibleContacts.map(contact => (\n        <li key={contact.id}>\n          {contact.name}: {contact.phone}{' '}\n          <button onClick={() => handleDeleteContact(contact.id)}>\n            Видалити\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default ContactList;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from '../../redux/contacts/contactsSlice';\nimport { selectFilter } from '../../redux/contacts/selectors';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const handleFilterChange = e => {\n    dispatch(setFilter(e.target.value));\n  };\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={handleFilterChange}\n        placeholder=\"Пошук контактів...\"\n      />\n    </div>\n  );\n};\n\nexport default Filter;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\n\nimport { fetchContacts } from '../redux/contacts/contactsOperations';\n\nimport  ContactForm  from '../components/ContactForm/ContactForm ';\nimport  ContactList  from '../components/ContactList/ContactList ';\nimport  Filter  from '../components/Filter/Filter';\nimport { selectIsLoading } from '../redux/contacts/selectors';\n\nexport default function ContactsPage() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      {/* <h1>`Телефонна книга` < /h1> */}\n      <div>{isLoading && 'Request in progress...'}</div>\n      <ContactForm />\n      <h2>Контакти</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n"],"names":["selectContacts","state","contacts","list","selectFilter","filter","selectIsLoading","isLoading","selectVisibleContacts","createSelector","contact","name","toLowerCase","includes","ContactForm","dispatch","useDispatch","useSelector","setContact","useState","number","errorMessage","setErrorMessage","handleInputChange","e","value","target","prevContact","_jsxs","_Fragment","children","onSubmit","async","preventDefault","console","log","trim","find","c","addContact","_jsx","type","onChange","required","style","color","ContactList","visibleContacts","map","phone","onClick","handleDeleteContact","id","deleteContact","Filter","setFilter","placeholder","ContactsPage","useEffect","fetchContacts"],"sourceRoot":""}